/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Player_H
#define Player_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "gofish_types.h"

namespace gofish {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PlayerIf {
 public:
  virtual ~PlayerIf() {}
  virtual void request(std::vector<int16_t> & _return, const std::string& rank, const int16_t index) = 0;
  virtual bool validateRequest(const std::string& rank, const int16_t index) = 0;
  virtual int32_t cardDrawn(const int16_t index) = 0;
  virtual int32_t getDeckShare(const int16_t index) = 0;
  virtual void startTurn(State& _return, const int16_t pNum) = 0;
  virtual void yourTurn() = 0;
  virtual bool bookAcquired(const std::vector<int32_t> & indices) = 0;
};

class PlayerIfFactory {
 public:
  typedef PlayerIf Handler;

  virtual ~PlayerIfFactory() {}

  virtual PlayerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PlayerIf* /* handler */) = 0;
};

class PlayerIfSingletonFactory : virtual public PlayerIfFactory {
 public:
  PlayerIfSingletonFactory(const boost::shared_ptr<PlayerIf>& iface) : iface_(iface) {}
  virtual ~PlayerIfSingletonFactory() {}

  virtual PlayerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PlayerIf* /* handler */) {}

 protected:
  boost::shared_ptr<PlayerIf> iface_;
};

class PlayerNull : virtual public PlayerIf {
 public:
  virtual ~PlayerNull() {}
  void request(std::vector<int16_t> & /* _return */, const std::string& /* rank */, const int16_t /* index */) {
    return;
  }
  bool validateRequest(const std::string& /* rank */, const int16_t /* index */) {
    bool _return = false;
    return _return;
  }
  int32_t cardDrawn(const int16_t /* index */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getDeckShare(const int16_t /* index */) {
    int32_t _return = 0;
    return _return;
  }
  void startTurn(State& /* _return */, const int16_t /* pNum */) {
    return;
  }
  void yourTurn() {
    return;
  }
  bool bookAcquired(const std::vector<int32_t> & /* indices */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Player_request_args__isset {
  _Player_request_args__isset() : rank(false), index(false) {}
  bool rank :1;
  bool index :1;
} _Player_request_args__isset;

class Player_request_args {
 public:

  Player_request_args(const Player_request_args&);
  Player_request_args& operator=(const Player_request_args&);
  Player_request_args() : rank(), index(0) {
  }

  virtual ~Player_request_args() throw();
  std::string rank;
  int16_t index;

  _Player_request_args__isset __isset;

  void __set_rank(const std::string& val);

  void __set_index(const int16_t val);

  bool operator == (const Player_request_args & rhs) const
  {
    if (!(rank == rhs.rank))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Player_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_request_pargs {
 public:


  virtual ~Player_request_pargs() throw();
  const std::string* rank;
  const int16_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_request_result__isset {
  _Player_request_result__isset() : success(false) {}
  bool success :1;
} _Player_request_result__isset;

class Player_request_result {
 public:

  Player_request_result(const Player_request_result&);
  Player_request_result& operator=(const Player_request_result&);
  Player_request_result() {
  }

  virtual ~Player_request_result() throw();
  std::vector<int16_t>  success;

  _Player_request_result__isset __isset;

  void __set_success(const std::vector<int16_t> & val);

  bool operator == (const Player_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_request_presult__isset {
  _Player_request_presult__isset() : success(false) {}
  bool success :1;
} _Player_request_presult__isset;

class Player_request_presult {
 public:


  virtual ~Player_request_presult() throw();
  std::vector<int16_t> * success;

  _Player_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Player_validateRequest_args__isset {
  _Player_validateRequest_args__isset() : rank(false), index(false) {}
  bool rank :1;
  bool index :1;
} _Player_validateRequest_args__isset;

class Player_validateRequest_args {
 public:

  Player_validateRequest_args(const Player_validateRequest_args&);
  Player_validateRequest_args& operator=(const Player_validateRequest_args&);
  Player_validateRequest_args() : rank(), index(0) {
  }

  virtual ~Player_validateRequest_args() throw();
  std::string rank;
  int16_t index;

  _Player_validateRequest_args__isset __isset;

  void __set_rank(const std::string& val);

  void __set_index(const int16_t val);

  bool operator == (const Player_validateRequest_args & rhs) const
  {
    if (!(rank == rhs.rank))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Player_validateRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_validateRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_validateRequest_pargs {
 public:


  virtual ~Player_validateRequest_pargs() throw();
  const std::string* rank;
  const int16_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_validateRequest_result__isset {
  _Player_validateRequest_result__isset() : success(false) {}
  bool success :1;
} _Player_validateRequest_result__isset;

class Player_validateRequest_result {
 public:

  Player_validateRequest_result(const Player_validateRequest_result&);
  Player_validateRequest_result& operator=(const Player_validateRequest_result&);
  Player_validateRequest_result() : success(0) {
  }

  virtual ~Player_validateRequest_result() throw();
  bool success;

  _Player_validateRequest_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Player_validateRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_validateRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_validateRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_validateRequest_presult__isset {
  _Player_validateRequest_presult__isset() : success(false) {}
  bool success :1;
} _Player_validateRequest_presult__isset;

class Player_validateRequest_presult {
 public:


  virtual ~Player_validateRequest_presult() throw();
  bool* success;

  _Player_validateRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Player_cardDrawn_args__isset {
  _Player_cardDrawn_args__isset() : index(false) {}
  bool index :1;
} _Player_cardDrawn_args__isset;

class Player_cardDrawn_args {
 public:

  Player_cardDrawn_args(const Player_cardDrawn_args&);
  Player_cardDrawn_args& operator=(const Player_cardDrawn_args&);
  Player_cardDrawn_args() : index(0) {
  }

  virtual ~Player_cardDrawn_args() throw();
  int16_t index;

  _Player_cardDrawn_args__isset __isset;

  void __set_index(const int16_t val);

  bool operator == (const Player_cardDrawn_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Player_cardDrawn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_cardDrawn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_cardDrawn_pargs {
 public:


  virtual ~Player_cardDrawn_pargs() throw();
  const int16_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_cardDrawn_result__isset {
  _Player_cardDrawn_result__isset() : success(false) {}
  bool success :1;
} _Player_cardDrawn_result__isset;

class Player_cardDrawn_result {
 public:

  Player_cardDrawn_result(const Player_cardDrawn_result&);
  Player_cardDrawn_result& operator=(const Player_cardDrawn_result&);
  Player_cardDrawn_result() : success(0) {
  }

  virtual ~Player_cardDrawn_result() throw();
  int32_t success;

  _Player_cardDrawn_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Player_cardDrawn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_cardDrawn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_cardDrawn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_cardDrawn_presult__isset {
  _Player_cardDrawn_presult__isset() : success(false) {}
  bool success :1;
} _Player_cardDrawn_presult__isset;

class Player_cardDrawn_presult {
 public:


  virtual ~Player_cardDrawn_presult() throw();
  int32_t* success;

  _Player_cardDrawn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Player_getDeckShare_args__isset {
  _Player_getDeckShare_args__isset() : index(false) {}
  bool index :1;
} _Player_getDeckShare_args__isset;

class Player_getDeckShare_args {
 public:

  Player_getDeckShare_args(const Player_getDeckShare_args&);
  Player_getDeckShare_args& operator=(const Player_getDeckShare_args&);
  Player_getDeckShare_args() : index(0) {
  }

  virtual ~Player_getDeckShare_args() throw();
  int16_t index;

  _Player_getDeckShare_args__isset __isset;

  void __set_index(const int16_t val);

  bool operator == (const Player_getDeckShare_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const Player_getDeckShare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_getDeckShare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_getDeckShare_pargs {
 public:


  virtual ~Player_getDeckShare_pargs() throw();
  const int16_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_getDeckShare_result__isset {
  _Player_getDeckShare_result__isset() : success(false) {}
  bool success :1;
} _Player_getDeckShare_result__isset;

class Player_getDeckShare_result {
 public:

  Player_getDeckShare_result(const Player_getDeckShare_result&);
  Player_getDeckShare_result& operator=(const Player_getDeckShare_result&);
  Player_getDeckShare_result() : success(0) {
  }

  virtual ~Player_getDeckShare_result() throw();
  int32_t success;

  _Player_getDeckShare_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Player_getDeckShare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_getDeckShare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_getDeckShare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_getDeckShare_presult__isset {
  _Player_getDeckShare_presult__isset() : success(false) {}
  bool success :1;
} _Player_getDeckShare_presult__isset;

class Player_getDeckShare_presult {
 public:


  virtual ~Player_getDeckShare_presult() throw();
  int32_t* success;

  _Player_getDeckShare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Player_startTurn_args__isset {
  _Player_startTurn_args__isset() : pNum(false) {}
  bool pNum :1;
} _Player_startTurn_args__isset;

class Player_startTurn_args {
 public:

  Player_startTurn_args(const Player_startTurn_args&);
  Player_startTurn_args& operator=(const Player_startTurn_args&);
  Player_startTurn_args() : pNum(0) {
  }

  virtual ~Player_startTurn_args() throw();
  int16_t pNum;

  _Player_startTurn_args__isset __isset;

  void __set_pNum(const int16_t val);

  bool operator == (const Player_startTurn_args & rhs) const
  {
    if (!(pNum == rhs.pNum))
      return false;
    return true;
  }
  bool operator != (const Player_startTurn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_startTurn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_startTurn_pargs {
 public:


  virtual ~Player_startTurn_pargs() throw();
  const int16_t* pNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_startTurn_result__isset {
  _Player_startTurn_result__isset() : success(false) {}
  bool success :1;
} _Player_startTurn_result__isset;

class Player_startTurn_result {
 public:

  Player_startTurn_result(const Player_startTurn_result&);
  Player_startTurn_result& operator=(const Player_startTurn_result&);
  Player_startTurn_result() {
  }

  virtual ~Player_startTurn_result() throw();
  State success;

  _Player_startTurn_result__isset __isset;

  void __set_success(const State& val);

  bool operator == (const Player_startTurn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_startTurn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_startTurn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_startTurn_presult__isset {
  _Player_startTurn_presult__isset() : success(false) {}
  bool success :1;
} _Player_startTurn_presult__isset;

class Player_startTurn_presult {
 public:


  virtual ~Player_startTurn_presult() throw();
  State* success;

  _Player_startTurn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Player_yourTurn_args {
 public:

  Player_yourTurn_args(const Player_yourTurn_args&);
  Player_yourTurn_args& operator=(const Player_yourTurn_args&);
  Player_yourTurn_args() {
  }

  virtual ~Player_yourTurn_args() throw();

  bool operator == (const Player_yourTurn_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Player_yourTurn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_yourTurn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_yourTurn_pargs {
 public:


  virtual ~Player_yourTurn_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_bookAcquired_args__isset {
  _Player_bookAcquired_args__isset() : indices(false) {}
  bool indices :1;
} _Player_bookAcquired_args__isset;

class Player_bookAcquired_args {
 public:

  Player_bookAcquired_args(const Player_bookAcquired_args&);
  Player_bookAcquired_args& operator=(const Player_bookAcquired_args&);
  Player_bookAcquired_args() {
  }

  virtual ~Player_bookAcquired_args() throw();
  std::vector<int32_t>  indices;

  _Player_bookAcquired_args__isset __isset;

  void __set_indices(const std::vector<int32_t> & val);

  bool operator == (const Player_bookAcquired_args & rhs) const
  {
    if (!(indices == rhs.indices))
      return false;
    return true;
  }
  bool operator != (const Player_bookAcquired_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_bookAcquired_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Player_bookAcquired_pargs {
 public:


  virtual ~Player_bookAcquired_pargs() throw();
  const std::vector<int32_t> * indices;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_bookAcquired_result__isset {
  _Player_bookAcquired_result__isset() : success(false) {}
  bool success :1;
} _Player_bookAcquired_result__isset;

class Player_bookAcquired_result {
 public:

  Player_bookAcquired_result(const Player_bookAcquired_result&);
  Player_bookAcquired_result& operator=(const Player_bookAcquired_result&);
  Player_bookAcquired_result() : success(0) {
  }

  virtual ~Player_bookAcquired_result() throw();
  bool success;

  _Player_bookAcquired_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Player_bookAcquired_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Player_bookAcquired_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player_bookAcquired_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Player_bookAcquired_presult__isset {
  _Player_bookAcquired_presult__isset() : success(false) {}
  bool success :1;
} _Player_bookAcquired_presult__isset;

class Player_bookAcquired_presult {
 public:


  virtual ~Player_bookAcquired_presult() throw();
  bool* success;

  _Player_bookAcquired_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PlayerClient : virtual public PlayerIf {
 public:
  PlayerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PlayerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request(std::vector<int16_t> & _return, const std::string& rank, const int16_t index);
  void send_request(const std::string& rank, const int16_t index);
  void recv_request(std::vector<int16_t> & _return);
  bool validateRequest(const std::string& rank, const int16_t index);
  void send_validateRequest(const std::string& rank, const int16_t index);
  bool recv_validateRequest();
  int32_t cardDrawn(const int16_t index);
  void send_cardDrawn(const int16_t index);
  int32_t recv_cardDrawn();
  int32_t getDeckShare(const int16_t index);
  void send_getDeckShare(const int16_t index);
  int32_t recv_getDeckShare();
  void startTurn(State& _return, const int16_t pNum);
  void send_startTurn(const int16_t pNum);
  void recv_startTurn(State& _return);
  void yourTurn();
  void send_yourTurn();
  bool bookAcquired(const std::vector<int32_t> & indices);
  void send_bookAcquired(const std::vector<int32_t> & indices);
  bool recv_bookAcquired();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PlayerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PlayerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PlayerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cardDrawn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeckShare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startTurn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_yourTurn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bookAcquired(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PlayerProcessor(boost::shared_ptr<PlayerIf> iface) :
    iface_(iface) {
    processMap_["request"] = &PlayerProcessor::process_request;
    processMap_["validateRequest"] = &PlayerProcessor::process_validateRequest;
    processMap_["cardDrawn"] = &PlayerProcessor::process_cardDrawn;
    processMap_["getDeckShare"] = &PlayerProcessor::process_getDeckShare;
    processMap_["startTurn"] = &PlayerProcessor::process_startTurn;
    processMap_["yourTurn"] = &PlayerProcessor::process_yourTurn;
    processMap_["bookAcquired"] = &PlayerProcessor::process_bookAcquired;
  }

  virtual ~PlayerProcessor() {}
};

class PlayerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PlayerProcessorFactory(const ::boost::shared_ptr< PlayerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PlayerIfFactory > handlerFactory_;
};

class PlayerMultiface : virtual public PlayerIf {
 public:
  PlayerMultiface(std::vector<boost::shared_ptr<PlayerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PlayerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PlayerIf> > ifaces_;
  PlayerMultiface() {}
  void add(boost::shared_ptr<PlayerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void request(std::vector<int16_t> & _return, const std::string& rank, const int16_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(_return, rank, index);
    }
    ifaces_[i]->request(_return, rank, index);
    return;
  }

  bool validateRequest(const std::string& rank, const int16_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateRequest(rank, index);
    }
    return ifaces_[i]->validateRequest(rank, index);
  }

  int32_t cardDrawn(const int16_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cardDrawn(index);
    }
    return ifaces_[i]->cardDrawn(index);
  }

  int32_t getDeckShare(const int16_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeckShare(index);
    }
    return ifaces_[i]->getDeckShare(index);
  }

  void startTurn(State& _return, const int16_t pNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startTurn(_return, pNum);
    }
    ifaces_[i]->startTurn(_return, pNum);
    return;
  }

  void yourTurn() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->yourTurn();
    }
    ifaces_[i]->yourTurn();
  }

  bool bookAcquired(const std::vector<int32_t> & indices) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bookAcquired(indices);
    }
    return ifaces_[i]->bookAcquired(indices);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PlayerConcurrentClient : virtual public PlayerIf {
 public:
  PlayerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PlayerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request(std::vector<int16_t> & _return, const std::string& rank, const int16_t index);
  int32_t send_request(const std::string& rank, const int16_t index);
  void recv_request(std::vector<int16_t> & _return, const int32_t seqid);
  bool validateRequest(const std::string& rank, const int16_t index);
  int32_t send_validateRequest(const std::string& rank, const int16_t index);
  bool recv_validateRequest(const int32_t seqid);
  int32_t cardDrawn(const int16_t index);
  int32_t send_cardDrawn(const int16_t index);
  int32_t recv_cardDrawn(const int32_t seqid);
  int32_t getDeckShare(const int16_t index);
  int32_t send_getDeckShare(const int16_t index);
  int32_t recv_getDeckShare(const int32_t seqid);
  void startTurn(State& _return, const int16_t pNum);
  int32_t send_startTurn(const int16_t pNum);
  void recv_startTurn(State& _return, const int32_t seqid);
  void yourTurn();
  void send_yourTurn();
  bool bookAcquired(const std::vector<int32_t> & indices);
  int32_t send_bookAcquired(const std::vector<int32_t> & indices);
  bool recv_bookAcquired(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
